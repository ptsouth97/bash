#####################
#  BASIC COMMANDS   #
#####################

MOVING AROUND AND MANAGING FILES
arrow 				shows command history
tab				auto-completes command
ls				lists files
cd {dir}			changes directory
cd "dir spaces" 		changes to directory with spaces in name
cd file\ name			alternate way to change to dir with spaces
cd ..				goes back one directory
cd ../..			goes back multiple directories
cd /				goes to root directory
cd ~				goes to home directory
mkdir {name}			makes a new directory
rmdir {dir}			removes directory if EMPTY
rm -r				removes directory if NOT EMPTY
rm {file}			removeS file
{editor} {file}			open file in editor like nano or vim
cat {file}			concatenates file contents, a.k.a., reads it
cmd1 && cmd2			&& = and then;  issues multiple commands back to back
| (pipe)			allows commands to be issued simultaneously

PAGER
cat {file} | less		shows text one page at a time; use pg up/down; ctrl-z exits

SEARCH
cat {file} | grep {pattern} 	reads file and search for pattern

MOVING AND COPYING FILES
mv {file} {new location}	moves file or directory (not a copy)
cp {file} {new location}	copies a file
cp -r {dir} {new location}	copies a directory
rsync -avzP {dir} {new loc}	copies directory with output; options a=archive; v=verbose; z=compression ; P=progress

POWER OFF
sudo shutdown -h now "message"	turn downs and halts (-h) system either now or specified time
sudo shutdown -r		reboots and can specify time and message from previous command
sudo reboot			another reboot option

ROOT PRIVILEGES
****Never login as root!!!****	root account is not authenticatable, but you can assume its privileges with sudo
sudo {cmd}			assumes roots privileges if user is in sudoers.d file
/etc/sudoers.d			specifies root privileges for system
su {user}			substitues user identity; i.e., switch to that user
exit				exits that user
groups				shows which groups you belong to

HELP
man {command}			shows manual for command
{command} --help		shows help, if available (can be double or single hyphen)

DATE AND TIME
date				shows date and time
sudo date MMddhhmmyyyy.ss	changes system date and time

USER AND GROUP MANAGEMENT
sudo adduser {name}		adds a user
sudo addgroup {name}		adds a group that shares permissions and privileges
groups				shows which groups current user belongs to
cat /etc/group			shows all groups on system
cat /etc/passwd			shows all users on system
sudo passwd {username}		changes user's password
sudo deluser {username}		deletes user
sudo groupdel {group}		deletes group
sudo addgroup {group}		makes a group
sudo adduser {user} {group}	adds user to group
sudo deluser {user} {group}	removes user from group

INSTALLING PROGRAMS AND UNDERSTANDING DEPENDENCIES
sudo apt-get install {program}	installs program when you know the name
sudo apt-get remove {program}	deletes program
sudo apt-cache search {type}	searches for a type of program (e.g., ftp)
sudo apt-get update		updates indexes from different repositories system uses
sudo apt-get upgrade		upgrades system
sudo vim /etc/apt/sources.list	shows all repositories system is configured to utilize
sudo do-release upgrade		keeps operating system up-to-date

NETWORKING
ifconfig			shows interface configuration; shows IP and MAC address
ping {url}			pings the server
sudo vim /etc/hostname		accesses file that contains the hostname;  user@hostname
sudo vim /etc/network/interfaces	configures system networs
sudo ifdown {interface}		brings interface down (e.g., wlan0 or eth0)
sudo ifup {interface}		brings interface up 

PERMISSIONS
rwx = 7
rw- = 6
r-x = 5
r-- = 4

777 = rwxrwxrwx
770 = rwxrwx---
755 = rwxr-xr-x
666 = rw-rw-rw-
644 = rw-r--r--
600 = rw-------

READ = View the file/directory
WRITE = Change/modify the file/directory
EXECUTE = Run code or enter directory

EXAMPLE
file(-)/directory(d) permissions(owner/group/others) user group
-rw------- 1 cody cody 364 Mar 10 16:34 nano.save
drwxrwxr-x 4 cody cody 4096 Mar 12 22:53 new

chmod 777 {file}		changes file permissions
sudo chown {user} {file}	changes owner
sudo chgrp {group} {file}	changes group

MANAGING FILE SYSTEMS
File systems can be mounted or unmounted (not accessible)
fdisk				partioning program
sudo fdisk -l			lists file system
dev/sd# 			hard drive; # = partition
sudo fdisk /dev/sd##		opens fdisk on that drive and partition; choose a command and then write it to disk

another program is 'parted' 	(must use for hard disks > 2 TB)
sudo parted			opens program to partition hard disks > 2 TB 
print all			shows file system
select /dev/###			selects a disk to work on
quit				exits parted

sudo mkfs.@@@ /dev/###		make file system of type @@@ (e.g., ext3) on drive /dev/###

df -h				shows disk space usage of file system in human readable form
 
MOUNT DRIVE
cd /mnt				change to mount directory
sudo mkdir  ###			make a new directory to mount to
sudo mount -t {} /dev/# /mnt/#	mount file system partition /dev/# of type 't' at mount /mnt/#
				***for file type FAT32 use 'vfat'
sudo umount /dev/#		unmount drive

EASIER WAY...
sudo blkid			shows UUIDs
				***UUID=Universal Unique IDenitfication number
sudo vim /etc/fstab		file system table (fstab)
add:  UUID=*** /mnt/sd# vfat defaults 0 2
sudo mount /dev/sda1

PROCESS MANAGEMENT
ctrl-z				suspends program in background (like minimizing in Windows)
ps				shows processes in a static output
fg {program}			brings program back into foreground
top				shows processes dynamically (like Windows task manager)
sudo kill -9 PID#		kill all (-9) processes with this process ID # (get info from 'ps' or 'top' command)
hey I made a change
